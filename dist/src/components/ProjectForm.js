import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import ImageUploader from './ImageUploader';
const SectionHeader = ({ title }) => (_jsx("h3", { className: "col-span-full text-xl font-semibold text-white border-b border-gray-700 pb-2 mb-4 mt-8", children: title }));
const ProjectForm = (props) => {
    return (_jsxs("div", { className: "grid grid-cols-1 md:grid-cols-2 gap-x-6 gap-y-4 p-6 bg-gray-800 rounded-xl border border-gray-700", children: [_jsx(SectionHeader, { title: "General Info" }), _jsx(Input, { label: "Project Name", value: props.projectName, onChange: props.setProjectName }), _jsx(Input, { label: "Country", value: props.country, onChange: props.setCountry }), _jsx(Input, { label: "Production Company", value: props.productionCompany, onChange: props.setProductionCompany }), _jsx(Select, { label: "Status", value: props.status, onChange: props.setStatus, options: ["Pre-Production", "Filming", "Post-Production", "Completed", "Canceled"] }), _jsx(SectionHeader, { title: "Creative Info" }), _jsx(Textarea, { label: "Logline", value: props.logline, onChange: props.setLogline }), _jsx(Textarea, { label: "Synopsis", value: props.synopsis, onChange: props.setSynopsis }), _jsx(Input, { label: "Genre", value: props.genre, onChange: props.setGenre }), _jsx(Input, { label: "Director", value: props.director, onChange: props.setDirector }), _jsx(Input, { label: "Producer", value: props.producer, onChange: props.setProducer }), _jsx(SectionHeader, { title: "Schedule" }), _jsx(Input, { label: "Start Date", type: "date", value: props.startDate, onChange: props.setStartDate }), _jsx(Input, { label: "End Date", type: "date", value: props.endDate, onChange: props.setEndDate }), _jsx(Input, { label: "Location", value: props.location, onChange: props.setLocation }), _jsx(SectionHeader, { title: "Images" }), _jsx("div", { className: "md:col-span-2 space-y-4", children: _jsxs("div", { children: [_jsx("label", { className: "block text-sm font-medium text-gray-300 mb-1", children: "Cover Image" }), _jsx(ImageUploader, { onImageUploaded: props.handleCoverImageUploaded })] }) }), _jsx(SectionHeader, { title: "Contact & Website" }), _jsx(Input, { label: "Project Website", value: props.projectWebsite, onChange: props.setProjectWebsite }), _jsx(Input, { label: "Production Budget", value: props.productionBudget, onChange: props.setProductionBudget }), _jsx(Input, { label: "Company Contact", value: props.productionCompanyContact, onChange: props.setProductionCompanyContact }), _jsx(SectionHeader, { title: "Verification" }), _jsxs("div", { className: "flex items-center space-x-2 md:col-span-2 mt-2", children: [_jsx("input", { id: "isVerified", type: "checkbox", checked: props.isVerified, onChange: (e) => props.setIsVerified(e.target.checked), className: "h-4 w-4 text-blue-500 bg-gray-700 border-gray-600 rounded" }), _jsx("label", { htmlFor: "isVerified", className: "text-sm text-gray-300", children: "Is Verified" })] })] }));
};
// Reusable Input
const Input = ({ label, value, onChange, type = "text", }) => (_jsxs("div", { children: [_jsx("label", { className: "block text-sm font-medium text-gray-300 mb-1", children: label }), _jsx("input", { type: type, value: value, onChange: (e) => onChange(e.target.value), className: "w-full bg-gray-900 text-white border border-gray-600 rounded-md p-2 focus:ring-blue-500 focus:border-blue-500" })] }));
// Reusable Textarea
const Textarea = ({ label, value, onChange, }) => (_jsxs("div", { className: "md:col-span-2", children: [_jsx("label", { className: "block text-sm font-medium text-gray-300 mb-1", children: label }), _jsx("textarea", { value: value, onChange: (e) => onChange(e.target.value), rows: 4, className: "w-full bg-gray-900 text-white border border-gray-600 rounded-md p-2 focus:ring-blue-500 focus:border-blue-500" })] }));
// Reusable Select
const Select = ({ label, value, onChange, options, }) => (_jsxs("div", { children: [_jsx("label", { className: "block text-sm font-medium text-gray-300 mb-1", children: label }), _jsx("select", { value: value, onChange: (e) => onChange(e.target.value), className: "w-full bg-gray-900 text-white border border-gray-600 rounded-md p-2 focus:ring-blue-500 focus:border-blue-500", children: options.map((opt) => (_jsx("option", { value: opt, children: opt }, opt))) })] }));
export default ProjectForm;
